
small_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000285a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000285a  000028ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080017c  0080017c  00002a0a  2**0
                  ALLOC
  3 .debug_aranges 000003d8  00000000  00000000  00002a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000625  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003664  00000000  00000000  00003407  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a37  00000000  00000000  00006a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000024e8  00000000  00000000  000084a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  0000a98c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c2a  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  0000bac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  0000c434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 97 12 	jmp	0x252e	; 0x252e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <main>
      8a:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 58       	subi	r30, 0x88	; 136
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GPIO_voidSetPinDirection>:
#include "GPIO_interface.h"
#include "GPIO_private.h"


void GPIO_voidSetPinDirection(EN_GPIO_PortId_t Copy_EnuPortId, EN_GPIO_PinId_t Copy_EnuPinId ,EN_GPIO_PinState_t Copy_EnuPinDirection)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	29 97       	sbiw	r28, 0x09	; 9
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_EnuPortId < PORT_MAX_NUM && Copy_EnuPinDirection < PIN_MAX_NUM)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <GPIO_voidSetPinDirection+0x22>
     e4e:	b0 c1       	rjmp	.+864    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	88 30       	cpi	r24, 0x08	; 8
     e54:	08 f0       	brcs	.+2      	; 0xe58 <GPIO_voidSetPinDirection+0x2a>
     e56:	ac c1       	rjmp	.+856    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
	{
		if(Copy_EnuPinDirection == PIN_INPUT)
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 23       	and	r24, r24
     e5c:	09 f0       	breq	.+2      	; 0xe60 <GPIO_voidSetPinDirection+0x32>
     e5e:	74 c0       	rjmp	.+232    	; 0xf48 <GPIO_voidSetPinDirection+0x11a>
		{
			switch(Copy_EnuPortId)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	39 87       	std	Y+9, r19	; 0x09
     e68:	28 87       	std	Y+8, r18	; 0x08
     e6a:	88 85       	ldd	r24, Y+8	; 0x08
     e6c:	99 85       	ldd	r25, Y+9	; 0x09
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	59 f1       	breq	.+86     	; 0xeca <GPIO_voidSetPinDirection+0x9c>
     e74:	28 85       	ldd	r18, Y+8	; 0x08
     e76:	39 85       	ldd	r19, Y+9	; 0x09
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <GPIO_voidSetPinDirection+0x5a>
     e7e:	88 85       	ldd	r24, Y+8	; 0x08
     e80:	99 85       	ldd	r25, Y+9	; 0x09
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f0       	breq	.+26     	; 0xea0 <GPIO_voidSetPinDirection+0x72>
     e86:	94 c1       	rjmp	.+808    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
     e88:	28 85       	ldd	r18, Y+8	; 0x08
     e8a:	39 85       	ldd	r19, Y+9	; 0x09
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	89 f1       	breq	.+98     	; 0xef4 <GPIO_voidSetPinDirection+0xc6>
     e92:	88 85       	ldd	r24, Y+8	; 0x08
     e94:	99 85       	ldd	r25, Y+9	; 0x09
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <GPIO_voidSetPinDirection+0x70>
     e9c:	40 c0       	rjmp	.+128    	; 0xf1e <GPIO_voidSetPinDirection+0xf0>
     e9e:	88 c1       	rjmp	.+784    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			{
			case GPIO_PORTA: 	CLR_BIT(GPIO_DDRA_REG, Copy_EnuPinId);	break;
     ea0:	aa e3       	ldi	r26, 0x3A	; 58
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ea e3       	ldi	r30, 0x3A	; 58
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_voidSetPinDirection+0x90>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_voidSetPinDirection+0x8c>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	73 c1       	rjmp	.+742    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			case GPIO_PORTB:	CLR_BIT(GPIO_DDRB_REG, Copy_EnuPinId);	break;
     eca:	a7 e3       	ldi	r26, 0x37	; 55
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e7 e3       	ldi	r30, 0x37	; 55
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_voidSetPinDirection+0xba>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_voidSetPinDirection+0xb6>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	5e c1       	rjmp	.+700    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			case GPIO_PORTC:	CLR_BIT(GPIO_DDRC_REG, Copy_EnuPinId);	break;
     ef4:	a4 e3       	ldi	r26, 0x34	; 52
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e4 e3       	ldi	r30, 0x34	; 52
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_voidSetPinDirection+0xe4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_voidSetPinDirection+0xe0>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	49 c1       	rjmp	.+658    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			case GPIO_PORTD:	CLR_BIT(GPIO_DDRD_REG, Copy_EnuPinId);	break;
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_voidSetPinDirection+0x10e>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_voidSetPinDirection+0x10a>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	34 c1       	rjmp	.+616    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			default: 			/* error message */				break;
			}
		}
		else if (Copy_EnuPinDirection == PIN_OUTPUT)
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <GPIO_voidSetPinDirection+0x122>
     f4e:	6f c0       	rjmp	.+222    	; 0x102e <GPIO_voidSetPinDirection+0x200>
		{
			switch(Copy_EnuPortId)
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3f 83       	std	Y+7, r19	; 0x07
     f58:	2e 83       	std	Y+6, r18	; 0x06
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	9f 81       	ldd	r25, Y+7	; 0x07
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	49 f1       	breq	.+82     	; 0xfb6 <GPIO_voidSetPinDirection+0x188>
     f64:	2e 81       	ldd	r18, Y+6	; 0x06
     f66:	3f 81       	ldd	r19, Y+7	; 0x07
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <GPIO_voidSetPinDirection+0x14a>
     f6e:	8e 81       	ldd	r24, Y+6	; 0x06
     f70:	9f 81       	ldd	r25, Y+7	; 0x07
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	61 f0       	breq	.+24     	; 0xf8e <GPIO_voidSetPinDirection+0x160>
     f76:	1c c1       	rjmp	.+568    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
     f78:	2e 81       	ldd	r18, Y+6	; 0x06
     f7a:	3f 81       	ldd	r19, Y+7	; 0x07
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	71 f1       	breq	.+92     	; 0xfde <GPIO_voidSetPinDirection+0x1b0>
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	e9 f1       	breq	.+122    	; 0x1006 <GPIO_voidSetPinDirection+0x1d8>
     f8c:	11 c1       	rjmp	.+546    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			{
			case GPIO_PORTA: 	SET_BIT(GPIO_DDRA_REG, Copy_EnuPinId);	break;
     f8e:	aa e3       	ldi	r26, 0x3A	; 58
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ea e3       	ldi	r30, 0x3A	; 58
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <GPIO_voidSetPinDirection+0x17e>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <GPIO_voidSetPinDirection+0x17a>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	fd c0       	rjmp	.+506    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			case GPIO_PORTB:	SET_BIT(GPIO_DDRB_REG, Copy_EnuPinId);	break;
     fb6:	a7 e3       	ldi	r26, 0x37	; 55
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e7 e3       	ldi	r30, 0x37	; 55
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <GPIO_voidSetPinDirection+0x1a6>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <GPIO_voidSetPinDirection+0x1a2>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	e9 c0       	rjmp	.+466    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			case GPIO_PORTC:	SET_BIT(GPIO_DDRC_REG, Copy_EnuPinId);	break;
     fde:	a4 e3       	ldi	r26, 0x34	; 52
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 e3       	ldi	r30, 0x34	; 52
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <GPIO_voidSetPinDirection+0x1ce>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <GPIO_voidSetPinDirection+0x1ca>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	d5 c0       	rjmp	.+426    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			case GPIO_PORTD:	SET_BIT(GPIO_DDRD_REG, Copy_EnuPinId);	break;
    1006:	a1 e3       	ldi	r26, 0x31	; 49
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e1 e3       	ldi	r30, 0x31	; 49
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <GPIO_voidSetPinDirection+0x1f6>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <GPIO_voidSetPinDirection+0x1f2>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	c1 c0       	rjmp	.+386    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			default: 			/* error message */				break;
			}
		}
		else if (Copy_EnuPinDirection == PIN_INPUT_PULLUP)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	09 f0       	breq	.+2      	; 0x1036 <GPIO_voidSetPinDirection+0x208>
    1034:	bd c0       	rjmp	.+378    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
		{
			switch(Copy_EnuPortId)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3d 83       	std	Y+5, r19	; 0x05
    103e:	2c 83       	std	Y+4, r18	; 0x04
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <GPIO_voidSetPinDirection+0x21e>
    104a:	3e c0       	rjmp	.+124    	; 0x10c8 <GPIO_voidSetPinDirection+0x29a>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <GPIO_voidSetPinDirection+0x232>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	71 f0       	breq	.+28     	; 0x107a <GPIO_voidSetPinDirection+0x24c>
    105e:	a8 c0       	rjmp	.+336    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <GPIO_voidSetPinDirection+0x23e>
    106a:	55 c0       	rjmp	.+170    	; 0x1116 <GPIO_voidSetPinDirection+0x2e8>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <GPIO_voidSetPinDirection+0x24a>
    1076:	76 c0       	rjmp	.+236    	; 0x1164 <GPIO_voidSetPinDirection+0x336>
    1078:	9b c0       	rjmp	.+310    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
			{
			case GPIO_PORTA:
				CLR_BIT(GPIO_DDRA_REG, Copy_EnuPinId);
    107a:	aa e3       	ldi	r26, 0x3A	; 58
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_voidSetPinDirection+0x268>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	2a 95       	dec	r18
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_voidSetPinDirection+0x264>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
				SET_BIT(GPIO_PORTA_REG, Copy_EnuPinId);
    10a0:	ab e3       	ldi	r26, 0x3B	; 59
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e3       	ldi	r30, 0x3B	; 59
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_voidSetPinDirection+0x290>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_voidSetPinDirection+0x28c>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	74 c0       	rjmp	.+232    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
				break;
			case GPIO_PORTB:
				CLR_BIT(GPIO_DDRB_REG, Copy_EnuPinId);
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_voidSetPinDirection+0x2b6>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	2a 95       	dec	r18
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_voidSetPinDirection+0x2b2>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
				SET_BIT(GPIO_PORTB_REG, Copy_EnuPinId);
    10ee:	a8 e3       	ldi	r26, 0x38	; 56
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_voidSetPinDirection+0x2de>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_voidSetPinDirection+0x2da>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	4d c0       	rjmp	.+154    	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
				break;
			case GPIO_PORTC:
				CLR_BIT(GPIO_DDRC_REG, Copy_EnuPinId);
    1116:	a4 e3       	ldi	r26, 0x34	; 52
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e4 e3       	ldi	r30, 0x34	; 52
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_voidSetPinDirection+0x304>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_voidSetPinDirection+0x300>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
				SET_BIT(GPIO_PORTC_REG, Copy_EnuPinId);
    113c:	a5 e3       	ldi	r26, 0x35	; 53
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_voidSetPinDirection+0x32c>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_voidSetPinDirection+0x328>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	26 c0       	rjmp	.+76     	; 0x11b0 <GPIO_voidSetPinDirection+0x382>
				break;
			case GPIO_PORTD:
				CLR_BIT(GPIO_DDRD_REG, Copy_EnuPinId);
    1164:	a1 e3       	ldi	r26, 0x31	; 49
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_voidSetPinDirection+0x352>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	2a 95       	dec	r18
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_voidSetPinDirection+0x34e>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
				SET_BIT(GPIO_PORTD_REG, Copy_EnuPinId);
    118a:	a2 e3       	ldi	r26, 0x32	; 50
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e2 e3       	ldi	r30, 0x32	; 50
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <GPIO_voidSetPinDirection+0x37a>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <GPIO_voidSetPinDirection+0x376>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
	}
	else
	{
		/* error message */
	}
}
    11b0:	29 96       	adiw	r28, 0x09	; 9
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(EN_GPIO_PortId_t Copy_EnuPortId, EN_GPIO_PinId_t Copy_EnuPinId ,EN_GPIO_Logic_t pinLogic)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	27 97       	sbiw	r28, 0x07	; 7
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
    11da:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_EnuPortId < PORT_MAX_NUM && Copy_EnuPinId < PIN_MAX_NUM)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <GPIO_voidSetPinValue+0x22>
    11e2:	ee c0       	rjmp	.+476    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <GPIO_voidSetPinValue+0x2a>
    11ea:	ea c0       	rjmp	.+468    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
	{
		if(pinLogic == LOGIC_LOW)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 23       	and	r24, r24
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <GPIO_voidSetPinValue+0x32>
    11f2:	74 c0       	rjmp	.+232    	; 0x12dc <GPIO_voidSetPinValue+0x11a>
		{
			switch(Copy_EnuPortId)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3f 83       	std	Y+7, r19	; 0x07
    11fc:	2e 83       	std	Y+6, r18	; 0x06
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	9f 81       	ldd	r25, Y+7	; 0x07
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	59 f1       	breq	.+86     	; 0x125e <GPIO_voidSetPinValue+0x9c>
    1208:	2e 81       	ldd	r18, Y+6	; 0x06
    120a:	3f 81       	ldd	r19, Y+7	; 0x07
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <GPIO_voidSetPinValue+0x5a>
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	9f 81       	ldd	r25, Y+7	; 0x07
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	69 f0       	breq	.+26     	; 0x1234 <GPIO_voidSetPinValue+0x72>
    121a:	d2 c0       	rjmp	.+420    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
    121c:	2e 81       	ldd	r18, Y+6	; 0x06
    121e:	3f 81       	ldd	r19, Y+7	; 0x07
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	89 f1       	breq	.+98     	; 0x1288 <GPIO_voidSetPinValue+0xc6>
    1226:	8e 81       	ldd	r24, Y+6	; 0x06
    1228:	9f 81       	ldd	r25, Y+7	; 0x07
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <GPIO_voidSetPinValue+0x70>
    1230:	40 c0       	rjmp	.+128    	; 0x12b2 <GPIO_voidSetPinValue+0xf0>
    1232:	c6 c0       	rjmp	.+396    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			{
			case GPIO_PORTA: 	CLR_BIT(GPIO_PORTA_REG, Copy_EnuPinId);	break;
    1234:	ab e3       	ldi	r26, 0x3B	; 59
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	eb e3       	ldi	r30, 0x3B	; 59
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_voidSetPinValue+0x90>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_voidSetPinValue+0x8c>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	b1 c0       	rjmp	.+354    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			case GPIO_PORTB:	CLR_BIT(GPIO_PORTB_REG, Copy_EnuPinId);	break;
    125e:	a8 e3       	ldi	r26, 0x38	; 56
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e8 e3       	ldi	r30, 0x38	; 56
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_voidSetPinValue+0xba>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_voidSetPinValue+0xb6>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	9c c0       	rjmp	.+312    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			case GPIO_PORTC:	CLR_BIT(GPIO_PORTC_REG, Copy_EnuPinId);	break;
    1288:	a5 e3       	ldi	r26, 0x35	; 53
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e3       	ldi	r30, 0x35	; 53
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_voidSetPinValue+0xe4>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_voidSetPinValue+0xe0>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	87 c0       	rjmp	.+270    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			case GPIO_PORTD:	CLR_BIT(GPIO_PORTD_REG, Copy_EnuPinId);	break;
    12b2:	a2 e3       	ldi	r26, 0x32	; 50
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e2 e3       	ldi	r30, 0x32	; 50
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_voidSetPinValue+0x10e>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_voidSetPinValue+0x10a>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	72 c0       	rjmp	.+228    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			default: 			/* error message */				break;
			}
		}
		else if (pinLogic == LOGIC_HIGH)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <GPIO_voidSetPinValue+0x122>
    12e2:	6e c0       	rjmp	.+220    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
		{
			switch(Copy_EnuPortId)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	49 f1       	breq	.+82     	; 0x134a <GPIO_voidSetPinValue+0x188>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <GPIO_voidSetPinValue+0x14a>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	61 f0       	breq	.+24     	; 0x1322 <GPIO_voidSetPinValue+0x160>
    130a:	5a c0       	rjmp	.+180    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	71 f1       	breq	.+92     	; 0x1372 <GPIO_voidSetPinValue+0x1b0>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	e9 f1       	breq	.+122    	; 0x139a <GPIO_voidSetPinValue+0x1d8>
    1320:	4f c0       	rjmp	.+158    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			{
			case GPIO_PORTA: 	SET_BIT(GPIO_PORTA_REG, Copy_EnuPinId);	break;
    1322:	ab e3       	ldi	r26, 0x3B	; 59
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	eb e3       	ldi	r30, 0x3B	; 59
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_voidSetPinValue+0x17e>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_voidSetPinValue+0x17a>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	3b c0       	rjmp	.+118    	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			case GPIO_PORTB:	SET_BIT(GPIO_PORTB_REG, Copy_EnuPinId);	break;
    134a:	a8 e3       	ldi	r26, 0x38	; 56
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_voidSetPinValue+0x1a6>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_voidSetPinValue+0x1a2>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	27 c0       	rjmp	.+78     	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			case GPIO_PORTC:	SET_BIT(GPIO_PORTC_REG, Copy_EnuPinId);	break;
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_voidSetPinValue+0x1ce>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_voidSetPinValue+0x1ca>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	13 c0       	rjmp	.+38     	; 0x13c0 <GPIO_voidSetPinValue+0x1fe>
			case GPIO_PORTD:	SET_BIT(GPIO_PORTD_REG, Copy_EnuPinId);	break;
    139a:	a2 e3       	ldi	r26, 0x32	; 50
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e2 e3       	ldi	r30, 0x32	; 50
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GPIO_voidSetPinValue+0x1f6>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <GPIO_voidSetPinValue+0x1f2>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
	{
		/* error message */

	}

}
    13c0:	27 96       	adiw	r28, 0x07	; 7
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <GPIO_voidGetPinValue>:

void GPIO_voidGetPinValue(EN_GPIO_PortId_t Copy_EnuPortId, EN_GPIO_PinId_t Copy_EnuPinId, u8 * Copy_u8PinValue)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	27 97       	sbiw	r28, 0x07	; 7
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	8a 83       	std	Y+2, r24	; 0x02
    13e8:	6b 83       	std	Y+3, r22	; 0x03
    13ea:	5d 83       	std	Y+5, r21	; 0x05
    13ec:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_Logic_t state;

	if(Copy_EnuPortId < PORT_MAX_NUM && Copy_EnuPinId < PIN_MAX_NUM)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <GPIO_voidGetPinValue+0x24>
    13f4:	6b c0       	rjmp	.+214    	; 0x14cc <GPIO_voidGetPinValue+0xfa>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <GPIO_voidGetPinValue+0x2c>
    13fc:	67 c0       	rjmp	.+206    	; 0x14cc <GPIO_voidGetPinValue+0xfa>
	{
		switch(Copy_EnuPortId)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3f 83       	std	Y+7, r19	; 0x07
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	4e 81       	ldd	r20, Y+6	; 0x06
    140a:	5f 81       	ldd	r21, Y+7	; 0x07
    140c:	41 30       	cpi	r20, 0x01	; 1
    140e:	51 05       	cpc	r21, r1
    1410:	41 f1       	breq	.+80     	; 0x1462 <GPIO_voidGetPinValue+0x90>
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	91 05       	cpc	r25, r1
    141a:	34 f4       	brge	.+12     	; 0x1428 <GPIO_voidGetPinValue+0x56>
    141c:	2e 81       	ldd	r18, Y+6	; 0x06
    141e:	3f 81       	ldd	r19, Y+7	; 0x07
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	61 f0       	breq	.+24     	; 0x143e <GPIO_voidGetPinValue+0x6c>
    1426:	52 c0       	rjmp	.+164    	; 0x14cc <GPIO_voidGetPinValue+0xfa>
    1428:	4e 81       	ldd	r20, Y+6	; 0x06
    142a:	5f 81       	ldd	r21, Y+7	; 0x07
    142c:	42 30       	cpi	r20, 0x02	; 2
    142e:	51 05       	cpc	r21, r1
    1430:	51 f1       	breq	.+84     	; 0x1486 <GPIO_voidGetPinValue+0xb4>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	b9 f1       	breq	.+110    	; 0x14aa <GPIO_voidGetPinValue+0xd8>
    143c:	47 c0       	rjmp	.+142    	; 0x14cc <GPIO_voidGetPinValue+0xfa>
		{
		case GPIO_PORTA: 	state = GET_BIT(GPIO_PINA_REG, Copy_EnuPinId);	break;
    143e:	e9 e3       	ldi	r30, 0x39	; 57
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_voidGetPinValue+0x84>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_voidGetPinValue+0x80>
    145a:	ca 01       	movw	r24, r20
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	35 c0       	rjmp	.+106    	; 0x14cc <GPIO_voidGetPinValue+0xfa>
		case GPIO_PORTB:	state = GET_BIT(GPIO_PINB_REG, Copy_EnuPinId);	break;
    1462:	e6 e3       	ldi	r30, 0x36	; 54
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a9 01       	movw	r20, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_voidGetPinValue+0xa8>
    1476:	55 95       	asr	r21
    1478:	47 95       	ror	r20
    147a:	8a 95       	dec	r24
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_voidGetPinValue+0xa4>
    147e:	ca 01       	movw	r24, r20
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	23 c0       	rjmp	.+70     	; 0x14cc <GPIO_voidGetPinValue+0xfa>
		case GPIO_PORTC:	state = GET_BIT(GPIO_PINC_REG, Copy_EnuPinId);	break;
    1486:	e3 e3       	ldi	r30, 0x33	; 51
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_voidGetPinValue+0xcc>
    149a:	55 95       	asr	r21
    149c:	47 95       	ror	r20
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_voidGetPinValue+0xc8>
    14a2:	ca 01       	movw	r24, r20
    14a4:	81 70       	andi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	11 c0       	rjmp	.+34     	; 0x14cc <GPIO_voidGetPinValue+0xfa>
		case GPIO_PORTD:	state = GET_BIT(GPIO_PIND_REG, Copy_EnuPinId);	break;
    14aa:	e0 e3       	ldi	r30, 0x30	; 48
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a9 01       	movw	r20, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <GPIO_voidGetPinValue+0xf0>
    14be:	55 95       	asr	r21
    14c0:	47 95       	ror	r20
    14c2:	8a 95       	dec	r24
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <GPIO_voidGetPinValue+0xec>
    14c6:	ca 01       	movw	r24, r20
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* error message */

	}
	*Copy_u8PinValue =  state;
    14cc:	ec 81       	ldd	r30, Y+4	; 0x04
    14ce:	fd 81       	ldd	r31, Y+5	; 0x05
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	80 83       	st	Z, r24
}
    14d4:	27 96       	adiw	r28, 0x07	; 7
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <GPIO_voidTogglePin>:

void GPIO_voidTogglePin(EN_GPIO_PortId_t Copy_EnuPortId, EN_GPIO_PinId_t Copy_EnuPinId)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <GPIO_voidTogglePin+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <GPIO_voidTogglePin+0x8>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_EnuPortId < PORT_MAX_NUM && Copy_EnuPinId < PIN_MAX_NUM)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	84 30       	cpi	r24, 0x04	; 4
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <GPIO_voidTogglePin+0x18>
    14fc:	72 c0       	rjmp	.+228    	; 0x15e2 <GPIO_voidTogglePin+0xfc>
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	08 f0       	brcs	.+2      	; 0x1506 <GPIO_voidTogglePin+0x20>
    1504:	6e c0       	rjmp	.+220    	; 0x15e2 <GPIO_voidTogglePin+0xfc>
	{
		switch(Copy_EnuPortId)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	49 f1       	breq	.+82     	; 0x156c <GPIO_voidTogglePin+0x86>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_voidTogglePin+0x48>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <GPIO_voidTogglePin+0x5e>
    152c:	5a c0       	rjmp	.+180    	; 0x15e2 <GPIO_voidTogglePin+0xfc>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	71 f1       	breq	.+92     	; 0x1594 <GPIO_voidTogglePin+0xae>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	e9 f1       	breq	.+122    	; 0x15bc <GPIO_voidTogglePin+0xd6>
    1542:	4f c0       	rjmp	.+158    	; 0x15e2 <GPIO_voidTogglePin+0xfc>
		{
		case GPIO_PORTA: 	TOG_BIT(GPIO_PORTA_REG, Copy_EnuPinId);	break;
    1544:	ab e3       	ldi	r26, 0x3B	; 59
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_voidTogglePin+0x7c>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_voidTogglePin+0x78>
    1566:	84 27       	eor	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	3b c0       	rjmp	.+118    	; 0x15e2 <GPIO_voidTogglePin+0xfc>
		case GPIO_PORTB:	TOG_BIT(GPIO_PORTB_REG, Copy_EnuPinId);	break;
    156c:	a8 e3       	ldi	r26, 0x38	; 56
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e8 e3       	ldi	r30, 0x38	; 56
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_voidTogglePin+0xa4>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_voidTogglePin+0xa0>
    158e:	84 27       	eor	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	27 c0       	rjmp	.+78     	; 0x15e2 <GPIO_voidTogglePin+0xfc>
		case GPIO_PORTC:	TOG_BIT(GPIO_PORTC_REG, Copy_EnuPinId);	break;
    1594:	a5 e3       	ldi	r26, 0x35	; 53
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e3       	ldi	r30, 0x35	; 53
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <GPIO_voidTogglePin+0xcc>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <GPIO_voidTogglePin+0xc8>
    15b6:	84 27       	eor	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	13 c0       	rjmp	.+38     	; 0x15e2 <GPIO_voidTogglePin+0xfc>
		case GPIO_PORTD:	TOG_BIT(GPIO_PORTD_REG, Copy_EnuPinId);	break;
    15bc:	a2 e3       	ldi	r26, 0x32	; 50
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e2 e3       	ldi	r30, 0x32	; 50
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <GPIO_voidTogglePin+0xf4>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <GPIO_voidTogglePin+0xf0>
    15de:	84 27       	eor	r24, r20
    15e0:	8c 93       	st	X, r24
	{
		/* error message */

	}

}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <GPIO_voidSetPortDirection>:


void GPIO_voidSetPortDirection(EN_GPIO_PortId_t Copy_EnuPortId, EN_GPIO_PinState_t Copy_EnuPinDirection)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <GPIO_voidSetPortDirection+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_voidSetPortDirection+0x8>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_voidSetPortDirection+0xa>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_EnuPinDirection == PIN_INPUT)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 23       	and	r24, r24
    1606:	79 f5       	brne	.+94     	; 0x1666 <GPIO_voidSetPortDirection+0x76>
	{
		switch(Copy_EnuPortId)
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3e 83       	std	Y+6, r19	; 0x06
    1610:	2d 83       	std	Y+5, r18	; 0x05
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	c9 f0       	breq	.+50     	; 0x164e <GPIO_voidSetPortDirection+0x5e>
    161c:	2d 81       	ldd	r18, Y+5	; 0x05
    161e:	3e 81       	ldd	r19, Y+6	; 0x06
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <GPIO_voidSetPortDirection+0x40>
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <GPIO_voidSetPortDirection+0x56>
    162e:	50 c0       	rjmp	.+160    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
    1630:	2d 81       	ldd	r18, Y+5	; 0x05
    1632:	3e 81       	ldd	r19, Y+6	; 0x06
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	71 f0       	breq	.+28     	; 0x1656 <GPIO_voidSetPortDirection+0x66>
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	69 f0       	breq	.+26     	; 0x165e <GPIO_voidSetPortDirection+0x6e>
    1644:	45 c0       	rjmp	.+138    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		{
		case GPIO_PORTA: 	GPIO_DDRA_REG = 0;		break;
    1646:	ea e3       	ldi	r30, 0x3A	; 58
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
    164c:	41 c0       	rjmp	.+130    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		case GPIO_PORTB: 	GPIO_DDRA_REG = 0;		break;
    164e:	ea e3       	ldi	r30, 0x3A	; 58
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	10 82       	st	Z, r1
    1654:	3d c0       	rjmp	.+122    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		case GPIO_PORTC: 	GPIO_DDRA_REG = 0;		break;
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	10 82       	st	Z, r1
    165c:	39 c0       	rjmp	.+114    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		case GPIO_PORTD: 	GPIO_DDRA_REG = 0;		break;
    165e:	ea e3       	ldi	r30, 0x3A	; 58
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	10 82       	st	Z, r1
    1664:	35 c0       	rjmp	.+106    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		default: /* error message */				break;
		}
	}
	else if(Copy_EnuPinDirection == PIN_OUTPUT)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 f5       	brne	.+100    	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
	{
		switch(Copy_EnuPortId)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3c 83       	std	Y+4, r19	; 0x04
    1674:	2b 83       	std	Y+3, r18	; 0x03
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	d1 f0       	breq	.+52     	; 0x16b4 <GPIO_voidSetPortDirection+0xc4>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	2c f4       	brge	.+10     	; 0x1694 <GPIO_voidSetPortDirection+0xa4>
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	61 f0       	breq	.+24     	; 0x16aa <GPIO_voidSetPortDirection+0xba>
    1692:	1e c0       	rjmp	.+60     	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	81 f0       	breq	.+32     	; 0x16be <GPIO_voidSetPortDirection+0xce>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	81 f0       	breq	.+32     	; 0x16c8 <GPIO_voidSetPortDirection+0xd8>
    16a8:	13 c0       	rjmp	.+38     	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		{
		case GPIO_PORTA: 	GPIO_DDRA_REG = 0xFF;	break;
    16aa:	ea e3       	ldi	r30, 0x3A	; 58
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	80 83       	st	Z, r24
    16b2:	0e c0       	rjmp	.+28     	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		case GPIO_PORTB: 	GPIO_DDRA_REG = 0xFF;	break;
    16b4:	ea e3       	ldi	r30, 0x3A	; 58
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	80 83       	st	Z, r24
    16bc:	09 c0       	rjmp	.+18     	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		case GPIO_PORTC: 	GPIO_DDRA_REG = 0xFF;	break;
    16be:	ea e3       	ldi	r30, 0x3A	; 58
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <GPIO_voidSetPortDirection+0xe0>
		case GPIO_PORTD: 	GPIO_DDRA_REG = 0xFF;	break;
    16c8:	ea e3       	ldi	r30, 0x3A	; 58
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	80 83       	st	Z, r24
	}
	else
	{
		/* error message */
	}
}
    16d0:	26 96       	adiw	r28, 0x06	; 6
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <GPIO_voidSetPortValue>:

void GPIO_voidSetPortValue(EN_GPIO_PortId_t Copy_EnuPortId, u8 Copy_u8PortValue)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_voidSetPortValue+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_voidSetPortValue+0x8>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortValue < 256)
	{
		switch(Copy_EnuPortId)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3c 83       	std	Y+4, r19	; 0x04
    16fa:	2b 83       	std	Y+3, r18	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	d1 f0       	breq	.+52     	; 0x173a <GPIO_voidSetPortValue+0x58>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <GPIO_voidSetPortValue+0x38>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <GPIO_voidSetPortValue+0x4e>
    1718:	1e c0       	rjmp	.+60     	; 0x1756 <GPIO_voidSetPortValue+0x74>
    171a:	2b 81       	ldd	r18, Y+3	; 0x03
    171c:	3c 81       	ldd	r19, Y+4	; 0x04
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <GPIO_voidSetPortValue+0x62>
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <GPIO_voidSetPortValue+0x6c>
    172e:	13 c0       	rjmp	.+38     	; 0x1756 <GPIO_voidSetPortValue+0x74>
		{
		case GPIO_PORTA: 	GPIO_PORTA_REG = Copy_u8PortValue;		break;
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <GPIO_voidSetPortValue+0x74>
		case GPIO_PORTB: 	GPIO_PORTB_REG = Copy_u8PortValue;		break;
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <GPIO_voidSetPortValue+0x74>
		case GPIO_PORTC: 	GPIO_PORTC_REG = Copy_u8PortValue;		break;
    1744:	e5 e3       	ldi	r30, 0x35	; 53
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <GPIO_voidSetPortValue+0x74>
		case GPIO_PORTD: 	GPIO_PORTD_REG = Copy_u8PortValue;		break;
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
	}
	else
	{
		/* error message */
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <GPIO_voidGetPortValue>:

void GPIO_voidGetPortValue(EN_GPIO_PortId_t Copy_EnuPortId, u8 * Copy_u8PortValue)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_voidGetPortValue+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_voidGetPortValue+0x8>
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_voidGetPortValue+0xa>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	7c 83       	std	Y+4, r23	; 0x04
    1776:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_portValue = 0;
    1778:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_EnuPortId)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3e 83       	std	Y+6, r19	; 0x06
    1782:	2d 83       	std	Y+5, r18	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	d1 f0       	breq	.+52     	; 0x17c2 <GPIO_voidGetPortValue+0x5e>
    178e:	2d 81       	ldd	r18, Y+5	; 0x05
    1790:	3e 81       	ldd	r19, Y+6	; 0x06
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	2c f4       	brge	.+10     	; 0x17a2 <GPIO_voidGetPortValue+0x3e>
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	61 f0       	breq	.+24     	; 0x17b8 <GPIO_voidGetPortValue+0x54>
    17a0:	1e c0       	rjmp	.+60     	; 0x17de <GPIO_voidGetPortValue+0x7a>
    17a2:	2d 81       	ldd	r18, Y+5	; 0x05
    17a4:	3e 81       	ldd	r19, Y+6	; 0x06
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	81 f0       	breq	.+32     	; 0x17cc <GPIO_voidGetPortValue+0x68>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	91 05       	cpc	r25, r1
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <GPIO_voidGetPortValue+0x72>
    17b6:	13 c0       	rjmp	.+38     	; 0x17de <GPIO_voidGetPortValue+0x7a>
	{
	case GPIO_PORTA: 	Local_portValue = GPIO_PINA_REG;		break;
    17b8:	e9 e3       	ldi	r30, 0x39	; 57
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	0e c0       	rjmp	.+28     	; 0x17de <GPIO_voidGetPortValue+0x7a>
	case GPIO_PORTB: 	Local_portValue = GPIO_PINB_REG;		break;
    17c2:	e6 e3       	ldi	r30, 0x36	; 54
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <GPIO_voidGetPortValue+0x7a>
	case GPIO_PORTC: 	Local_portValue = GPIO_PINC_REG;		break;
    17cc:	e3 e3       	ldi	r30, 0x33	; 51
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <GPIO_voidGetPortValue+0x7a>
	case GPIO_PORTD: 	Local_portValue = GPIO_PIND_REG;		break;
    17d6:	e0 e3       	ldi	r30, 0x30	; 48
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	89 83       	std	Y+1, r24	; 0x01
	default: /* error message */						break;
	}
	*Copy_u8PortValue =  Local_portValue;
    17de:	eb 81       	ldd	r30, Y+3	; 0x03
    17e0:	fc 81       	ldd	r31, Y+4	; 0x04
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	80 83       	st	Z, r24
}
    17e6:	26 96       	adiw	r28, 0x06	; 6
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <ADC_init+0x6>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = configured as required by the user
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (Config_Ptr->ref_volt) << 6;
    1806:	a7 e2       	ldi	r26, 0x27	; 39
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	80 81       	ld	r24, Z
    1810:	82 95       	swap	r24
    1812:	88 0f       	add	r24, r24
    1814:	88 0f       	add	r24, r24
    1816:	80 7c       	andi	r24, 0xC0	; 192
    1818:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = configured as required by the user
	 */
	ADCSRA = (Config_Ptr->prescaler) | (1 << ADEN);
    181a:	a6 e2       	ldi	r26, 0x26	; 38
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e9 81       	ldd	r30, Y+1	; 0x01
    1820:	fa 81       	ldd	r31, Y+2	; 0x02
    1822:	81 81       	ldd	r24, Z+1	; 0x01
    1824:	80 68       	ori	r24, 0x80	; 128
    1826:	8c 93       	st	X, r24
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <ADC_readChannel>:

u16 ADC_readChannel(u8 channel_num)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | (channel_num & 0x07); /* clear first 5 bits and insert the required channel number */
    183e:	a7 e2       	ldi	r26, 0x27	; 39
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e7 e2       	ldi	r30, 0x27	; 39
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	98 2f       	mov	r25, r24
    184a:	90 7e       	andi	r25, 0xE0	; 224
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	87 70       	andi	r24, 0x07	; 7
    1850:	89 2b       	or	r24, r25
    1852:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1854:	a6 e2       	ldi	r26, 0x26	; 38
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e6 e2       	ldi	r30, 0x26	; 38
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 64       	ori	r24, 0x40	; 64
    1860:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    1862:	e6 e2       	ldi	r30, 0x26	; 38
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	82 95       	swap	r24
    186a:	8f 70       	andi	r24, 0x0F	; 15
    186c:	88 23       	and	r24, r24
    186e:	c9 f3       	breq	.-14     	; 0x1862 <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    1870:	a6 e2       	ldi	r26, 0x26	; 38
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e6 e2       	ldi	r30, 0x26	; 38
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 61       	ori	r24, 0x10	; 16
    187c:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    187e:	e4 e2       	ldi	r30, 0x24	; 36
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
}
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
u8 LM35_getTemperature(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <LM35_getTemperature+0x6>
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	u8 temp_value = 0;
    189a:	1b 82       	std	Y+3, r1	; 0x03

	u16 adc_value = 0;
    189c:	1a 82       	std	Y+2, r1	; 0x02
    189e:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	0e 94 19 0c 	call	0x1832	; 0x1832 <ADC_readChannel>
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (u8)(((u32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	cc 01       	movw	r24, r24
    18b0:	a0 e0       	ldi	r26, 0x00	; 0
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	26 e9       	ldi	r18, 0x96	; 150
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 90 13 	call	0x2720	; 0x2720 <__mulsi3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	37 ed       	ldi	r19, 0xD7	; 215
    18dc:	43 e2       	ldi	r20, 0x23	; 35
    18de:	50 e4       	ldi	r21, 0x40	; 64
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 ed       	ldi	r19, 0xD0	; 208
    18f0:	4f eb       	ldi	r20, 0xBF	; 191
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <LCD_init>:
		LCD_HIGHER_NIBBLES_PINS
};


void LCD_init(void)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	2f 97       	sbiw	r28, 0x0f	; 15
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
	/* create a variable to loop through the data pins */
	u8 pin_counter;

	/* Adjust Enable, RS, and Data pins as output*/
	GPIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	63 e0       	ldi	r22, 0x03	; 3
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_EN_PORT, LCD_EN_PIN, PIN_OUTPUT);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>

	/* Adjust the data pins as output */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1940:	1f 86       	std	Y+15, r1	; 0x0f
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <LCD_init+0x4a>
	{
		GPIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], PIN_OUTPUT);
    1944:	8f 85       	ldd	r24, Y+15	; 0x0f
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	fc 01       	movw	r30, r24
    194c:	e8 58       	subi	r30, 0x88	; 136
    194e:	fe 4f       	sbci	r31, 0xFE	; 254
    1950:	90 81       	ld	r25, Z
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	69 2f       	mov	r22, r25
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	/* Adjust Enable, RS, and Data pins as output*/
	GPIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
	GPIO_voidSetPinDirection(LCD_EN_PORT, LCD_EN_PIN, PIN_OUTPUT);

	/* Adjust the data pins as output */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    195c:	8f 85       	ldd	r24, Y+15	; 0x0f
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	8f 87       	std	Y+15, r24	; 0x0f
    1962:	8f 85       	ldd	r24, Y+15	; 0x0f
    1964:	84 30       	cpi	r24, 0x04	; 4
    1966:	70 f3       	brcs	.-36     	; 0x1944 <LCD_init+0x2c>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 ea       	ldi	r26, 0xA0	; 160
    196e:	b1 e4       	ldi	r27, 0x41	; 65
    1970:	8b 87       	std	Y+11, r24	; 0x0b
    1972:	9c 87       	std	Y+12, r25	; 0x0c
    1974:	ad 87       	std	Y+13, r26	; 0x0d
    1976:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	7c 85       	ldd	r23, Y+12	; 0x0c
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a e7       	ldi	r20, 0x7A	; 122
    1986:	53 e4       	ldi	r21, 0x43	; 67
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8f 83       	std	Y+7, r24	; 0x07
    1992:	98 87       	std	Y+8, r25	; 0x08
    1994:	a9 87       	std	Y+9, r26	; 0x09
    1996:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <LCD_init+0xa2>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <LCD_init+0x120>
	else if (__tmp > 65535)
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	57 e4       	ldi	r21, 0x47	; 71
    19ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <LCD_init+0x102>
    19fc:	89 e1       	ldi	r24, 0x19	; 25
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_init+0xf0>
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <LCD_init+0xe4>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_init+0x12c>
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

#if	(LCD_OPERATION_MODE == LCD_4BIT_MODE)
	{
		LCD_sendCommand(LCD_TWO_LINES_4BITS_MODE);
    1a4c:	88 e2       	ldi	r24, 0x28	; 40
    1a4e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>
		LCD_sendCommand(LCD_FOUR_BIT_INIT_ONE);
    1a52:	83 e3       	ldi	r24, 0x33	; 51
    1a54:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>
		LCD_sendCommand(LCD_FOUR_BIT_INIT_TWO);
    1a58:	82 e3       	ldi	r24, 0x32	; 50
    1a5a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>
	{
#error "undefined operation mode"
	}
#endif

	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1a5e:	8c e0       	ldi	r24, 0x0C	; 12
    1a60:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>

}
    1a6a:	2f 96       	adiw	r28, 0x0f	; 15
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <LCD_sendCommand>:

void LCD_sendCommand(u8 command)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <LCD_sendCommand+0x6>
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	8a 83       	std	Y+2, r24	; 0x02
	/* create a variable to loop through the data pins */
	u8 pin_counter = 0;
    1a88:	19 82       	std	Y+1, r1	; 0x01

	/* CHOOSE COMMAND REGISTER AND PUT DATA ON THE DATA PINS */
	GPIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	63 e0       	ldi	r22, 0x03	; 3
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

#if	(LCD_OPERATION_MODE == LCD_FOUR_BIT_MODE)

	/* Set the higher nibble of the command, on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1a94:	19 82       	std	Y+1, r1	; 0x01
    1a96:	1f c0       	rjmp	.+62     	; 0x1ad6 <LCD_sendCommand+0x5a>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(command, 4+pin_counter));
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e8 58       	subi	r30, 0x88	; 136
    1aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa4:	40 81       	ld	r20, Z
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	04 96       	adiw	r24, 0x04	; 4
    1ab4:	b9 01       	movw	r22, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <LCD_sendCommand+0x40>
    1ab8:	75 95       	asr	r23
    1aba:	67 95       	ror	r22
    1abc:	8a 95       	dec	r24
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <LCD_sendCommand+0x3c>
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	91 70       	andi	r25, 0x01	; 1
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	64 2f       	mov	r22, r20
    1aca:	49 2f       	mov	r20, r25
    1acc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);

#if	(LCD_OPERATION_MODE == LCD_FOUR_BIT_MODE)

	/* Set the higher nibble of the command, on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	8f 5f       	subi	r24, 0xFF	; 255
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	f0 f2       	brcs	.-68     	; 0x1a98 <LCD_sendCommand+0x1c>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(command, 4+pin_counter));
	}

	/* generate the high to low pulse on enable */
	LCD_generateEnablePulse();
    1adc:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <LCD_generateEnablePulse>

	/* Set the lower nibble of the command, on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	1e c0       	rjmp	.+60     	; 0x1b20 <LCD_sendCommand+0xa4>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(command, pin_counter));
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	fc 01       	movw	r30, r24
    1aec:	e8 58       	subi	r30, 0x88	; 136
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	40 81       	ld	r20, Z
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	b9 01       	movw	r22, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <LCD_sendCommand+0x8a>
    1b02:	75 95       	asr	r23
    1b04:	67 95       	ror	r22
    1b06:	8a 95       	dec	r24
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <LCD_sendCommand+0x86>
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	91 70       	andi	r25, 0x01	; 1
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	64 2f       	mov	r22, r20
    1b14:	49 2f       	mov	r20, r25
    1b16:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

	/* generate the high to low pulse on enable */
	LCD_generateEnablePulse();

	/* Set the lower nibble of the command, on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	84 30       	cpi	r24, 0x04	; 4
    1b24:	f8 f2       	brcs	.-66     	; 0x1ae4 <LCD_sendCommand+0x68>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(command, pin_counter));
	}
	LCD_generateEnablePulse();
    1b26:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <LCD_generateEnablePulse>
	}
#else
	/* error */
#endif

}
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <LCD_displayChar>:

void LCD_displayChar(u8 data)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <LCD_displayChar+0x6>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
	/* create a variable to loop through the data pins */
	u8 pin_counter;

	/* Write 1 on the RS pin to send data */
	GPIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

#if	(LCD_OPERATION_MODE == LCD_FOUR_BIT_MODE)

	/* Set the higher nibble of the data on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	1f c0       	rjmp	.+62     	; 0x1b8c <LCD_displayChar+0x58>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(data, 4+pin_counter));
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	fc 01       	movw	r30, r24
    1b56:	e8 58       	subi	r30, 0x88	; 136
    1b58:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5a:	40 81       	ld	r20, Z
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	04 96       	adiw	r24, 0x04	; 4
    1b6a:	b9 01       	movw	r22, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <LCD_displayChar+0x3e>
    1b6e:	75 95       	asr	r23
    1b70:	67 95       	ror	r22
    1b72:	8a 95       	dec	r24
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <LCD_displayChar+0x3a>
    1b76:	cb 01       	movw	r24, r22
    1b78:	98 2f       	mov	r25, r24
    1b7a:	91 70       	andi	r25, 0x01	; 1
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	64 2f       	mov	r22, r20
    1b80:	49 2f       	mov	r20, r25
    1b82:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);

#if	(LCD_OPERATION_MODE == LCD_FOUR_BIT_MODE)

	/* Set the higher nibble of the data on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	84 30       	cpi	r24, 0x04	; 4
    1b90:	f0 f2       	brcs	.-68     	; 0x1b4e <LCD_displayChar+0x1a>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(data, 4+pin_counter));
	}

	LCD_generateEnablePulse();
    1b92:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <LCD_generateEnablePulse>

	/* Set the lower nibble of the command, on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1b96:	19 82       	std	Y+1, r1	; 0x01
    1b98:	1e c0       	rjmp	.+60     	; 0x1bd6 <LCD_displayChar+0xa2>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(data, pin_counter));
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	e8 58       	subi	r30, 0x88	; 136
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	40 81       	ld	r20, Z
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	b9 01       	movw	r22, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <LCD_displayChar+0x88>
    1bb8:	75 95       	asr	r23
    1bba:	67 95       	ror	r22
    1bbc:	8a 95       	dec	r24
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <LCD_displayChar+0x84>
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	91 70       	andi	r25, 0x01	; 1
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	64 2f       	mov	r22, r20
    1bca:	49 2f       	mov	r20, r25
    1bcc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
	}

	LCD_generateEnablePulse();

	/* Set the lower nibble of the command, on the data pins */
	for(pin_counter = 0; pin_counter < LCD_DATA_PINS_USED; pin_counter++)
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	f8 f2       	brcs	.-66     	; 0x1b9a <LCD_displayChar+0x66>
	{
		GPIO_voidSetPinValue(LCD_DATA_PORT_ID, LCD_dataPins_Ids[pin_counter], GET_BIT(data, pin_counter));
	}

	LCD_generateEnablePulse();
    1bdc:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <LCD_generateEnablePulse>
	}
#else
	/* error */
#endif

}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <LCD_displayString>:

void LCD_displayString(u8 * str)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <LCD_displayString+0x6>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	9b 83       	std	Y+3, r25	; 0x03
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <LCD_displayString+0x32>
	while(str[counter])
	{
		LCD_displayChar(str[counter++]);
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	9b 81       	ldd	r25, Y+3	; 0x03
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e2 0f       	add	r30, r18
    1c0c:	f3 1f       	adc	r31, r19
    1c0e:	90 81       	ld	r25, Z
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 2f       	mov	r24, r25
    1c18:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <LCD_displayChar>
}

void LCD_displayString(u8 * str)
{
	u8 counter = 0;
	while(str[counter])
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	9b 81       	ldd	r25, Y+3	; 0x03
    1c26:	fc 01       	movw	r30, r24
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 23       	and	r24, r24
    1c30:	31 f7       	brne	.-52     	; 0x1bfe <LCD_displayString+0x14>
	{
		LCD_displayChar(str[counter++]);
	}
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <LCD_generateEnablePulse>:

static void LCD_generateEnablePulse()
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	2e 97       	sbiw	r28, 0x0e	; 14
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	62 e0       	ldi	r22, 0x02	; 2
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e0       	ldi	r26, 0x00	; 0
    1c62:	b0 e4       	ldi	r27, 0x40	; 64
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
    1c66:	9c 87       	std	Y+12, r25	; 0x0c
    1c68:	ad 87       	std	Y+13, r26	; 0x0d
    1c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e7       	ldi	r20, 0x7A	; 122
    1c7a:	53 e4       	ldi	r21, 0x43	; 67
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8f 83       	std	Y+7, r24	; 0x07
    1c86:	98 87       	std	Y+8, r25	; 0x08
    1c88:	a9 87       	std	Y+9, r26	; 0x09
    1c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <LCD_generateEnablePulse+0x70>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <LCD_generateEnablePulse+0xee>
	else if (__tmp > 65535)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <LCD_generateEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <LCD_generateEnablePulse+0xd0>
    1cf0:	89 e1       	ldi	r24, 0x19	; 25
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_generateEnablePulse+0xbe>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <LCD_generateEnablePulse+0xb2>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <LCD_generateEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_generateEnablePulse+0xfa>
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidSetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	62 e0       	ldi	r22, 0x02	; 2
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
}
    1d4a:	2e 96       	adiw	r28, 0x0e	; 14
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <LCD_moveCursor>:

void LCD_moveCursor(u8 row_number, u8 col_number)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <LCD_moveCursor+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <LCD_moveCursor+0x8>
    1d78:	0f 92       	push	r0
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row_number)
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	3d 83       	std	Y+5, r19	; 0x05
    1d8a:	2c 83       	std	Y+4, r18	; 0x04
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	91 05       	cpc	r25, r1
    1d94:	c1 f0       	breq	.+48     	; 0x1dc6 <LCD_moveCursor+0x56>
    1d96:	2c 81       	ldd	r18, Y+4	; 0x04
    1d98:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <LCD_moveCursor+0x3a>
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <LCD_moveCursor+0x50>
    1da8:	19 c0       	rjmp	.+50     	; 0x1ddc <LCD_moveCursor+0x6c>
    1daa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dac:	3d 81       	ldd	r19, Y+5	; 0x05
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	69 f0       	breq	.+26     	; 0x1dce <LCD_moveCursor+0x5e>
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	9d 81       	ldd	r25, Y+5	; 0x05
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	91 05       	cpc	r25, r1
    1dbc:	61 f0       	breq	.+24     	; 0x1dd6 <LCD_moveCursor+0x66>
    1dbe:	0e c0       	rjmp	.+28     	; 0x1ddc <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col_number;
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	0b c0       	rjmp	.+22     	; 0x1ddc <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col_number+0x40;
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	80 5c       	subi	r24, 0xC0	; 192
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	07 c0       	rjmp	.+14     	; 0x1ddc <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col_number+0x10;
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	80 5f       	subi	r24, 0xF0	; 240
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col_number+0x50;
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	80 5b       	subi	r24, 0xB0	; 176
    1dda:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	80 68       	ori	r24, 0x80	; 128
    1de0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>

}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <LCD_displayNumber>:

void LCD_displayNumber(s32 num)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	63 97       	sbiw	r28, 0x13	; 19
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	68 8b       	std	Y+16, r22	; 0x10
    1e0a:	79 8b       	std	Y+17, r23	; 0x11
    1e0c:	8a 8b       	std	Y+18, r24	; 0x12
    1e0e:	9b 8b       	std	Y+19, r25	; 0x13
	u8 buffer[15] = {'\0'};
    1e10:	8f e0       	ldi	r24, 0x0F	; 15
    1e12:	fe 01       	movw	r30, r28
    1e14:	31 96       	adiw	r30, 0x01	; 1
    1e16:	df 01       	movw	r26, r30
    1e18:	98 2f       	mov	r25, r24
    1e1a:	1d 92       	st	X+, r1
    1e1c:	9a 95       	dec	r25
    1e1e:	e9 f7       	brne	.-6      	; 0x1e1a <LCD_displayNumber+0x26>
	itoa(num, buffer, DECIMAL);
    1e20:	88 89       	ldd	r24, Y+16	; 0x10
    1e22:	99 89       	ldd	r25, Y+17	; 0x11
    1e24:	9e 01       	movw	r18, r28
    1e26:	2f 5f       	subi	r18, 0xFF	; 255
    1e28:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	4a e0       	ldi	r20, 0x0A	; 10
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	0e 94 e6 13 	call	0x27cc	; 0x27cc <itoa>
	LCD_displayString(buffer);
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <LCD_displayString>
}
    1e3c:	63 96       	adiw	r28, 0x13	; 19
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <DcMotor_Init>:
 * Description :
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	/* set the 2 motor pins and the enable pin of the l293 driver as output */
	GPIO_voidSetPinDirection(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_PIN_ID, PIN_OUTPUT);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_PIN_ID, PIN_OUTPUT);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	62 e0       	ldi	r22, 0x02	; 2
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(DC_MOTOR_EN_PORT_ID, DC_MOTOR_EN_PIN_ID, PIN_OUTPUT);
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	63 e0       	ldi	r22, 0x03	; 3
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>

	/* Initially motor is stopped "The two pin are logic low"*/
	GPIO_voidSetPinValue(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_PIN_ID, LOGIC_LOW);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_PIN_ID, LOGIC_LOW);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_EN_PIN_ID, LOGIC_LOW);
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	63 e0       	ldi	r22, 0x03	; 3
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <DcMotor_Rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on
 * the state input state value, Motor speed is always at max.
 *
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <DcMotor_Rotate+0x6>
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	/* check which state is required */
	switch(state)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3b 83       	std	Y+3, r19	; 0x03
    1eae:	2a 83       	std	Y+2, r18	; 0x02
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	d9 f0       	breq	.+54     	; 0x1ef0 <DcMotor_Rotate+0x58>
    1eba:	2a 81       	ldd	r18, Y+2	; 0x02
    1ebc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	49 f1       	breq	.+82     	; 0x1f16 <DcMotor_Rotate+0x7e>
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	a1 f5       	brne	.+104    	; 0x1f34 <DcMotor_Rotate+0x9c>
	{
	case CW:
		/* set motor pin1 to HIGH logic, clear motor pin2 */
		GPIO_voidSetPinValue(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_PIN_ID, LOGIC_HIGH);
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_PIN_ID, LOGIC_LOW);
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	62 e0       	ldi	r22, 0x02	; 2
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(DC_MOTOR_EN_PORT_ID, DC_MOTOR_EN_PIN_ID, LOGIC_HIGH);
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		rotationDir = 0;
    1eea:	10 92 7c 01 	sts	0x017C, r1
    1eee:	22 c0       	rjmp	.+68     	; 0x1f34 <DcMotor_Rotate+0x9c>
		break;

	case A_CW:
		/* set motor pin2 to HIGH logic, clear motor pin1 */
		GPIO_voidSetPinValue(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_PIN_ID, LOGIC_LOW);
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_PIN_ID, LOGIC_HIGH);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

		GPIO_voidSetPinValue(DC_MOTOR_EN_PORT_ID, DC_MOTOR_EN_PIN_ID, LOGIC_HIGH);
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	63 e0       	ldi	r22, 0x03	; 3
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		rotationDir = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 7c 01 	sts	0x017C, r24
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <DcMotor_Rotate+0x9c>
		break;

	case STOP:
		GPIO_voidSetPinValue(DC_MOTOR_PIN1_PORT_ID, DC_MOTOR_PIN1_PIN_ID, LOGIC_LOW);
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(DC_MOTOR_PIN2_PORT_ID, DC_MOTOR_PIN2_PIN_ID, LOGIC_LOW);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

		/* No PWM needed */
		GPIO_voidSetPinValue(DC_MOTOR_EN_PORT_ID, DC_MOTOR_EN_PIN_ID, LOGIC_LOW);
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	63 e0       	ldi	r22, 0x03	; 3
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
		break;
	}
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <DcMotor_voidChangeDir>:

void DcMotor_voidChangeDir(void)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
	if (rotationDir == 0)
    1f48:	80 91 7c 01 	lds	r24, 0x017C
    1f4c:	88 23       	and	r24, r24
    1f4e:	39 f4       	brne	.+14     	; 0x1f5e <DcMotor_voidChangeDir+0x1e>
	{
		DcMotor_Rotate(A_CW);
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <DcMotor_Rotate>
		rotationDir = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 7c 01 	sts	0x017C, r24
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <DcMotor_voidChangeDir+0x28>
	}else
	{
		DcMotor_Rotate(CW);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <DcMotor_Rotate>
		rotationDir = 0;
    1f64:	10 92 7c 01 	sts	0x017C, r1
	}
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <BUZZER_init>:
#include "BUZZER_cfg.h"
#include "BUZZER_interface.h"
#include "BUZZER_private.h"

void BUZZER_init(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	GPIO_voidSetPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	66 e0       	ldi	r22, 0x06	; 6
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
}
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <BUZZER_turnOn>:
void BUZZER_turnOn(void)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	GPIO_voidSetPinValue(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	66 e0       	ldi	r22, 0x06	; 6
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>
}
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <BUZZER_turnOff>:
void BUZZER_turnOff(void)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	GPIO_voidSetPinValue(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	66 e0       	ldi	r22, 0x06	; 6
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_voidSetPinValue>

}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <OS_voidInit>:
ST_task_t OS_arrTasks[OS_u8_MAX_NUMBER_TASKS];

//static void  OS_voidScheduler(void);

void OS_voidInit(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Timer */
	TIMER0_voidInit(TIMER0_NORMAL_MODE);
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	0e 94 6f 11 	call	0x22de	; 0x22de <TIMER0_voidInit>
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <OS_voidStartScheduler>:

void OS_voidStartScheduler(void)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidSetIntervalPeriodic(PERIODIC_TIME , OS_voidScheduler );
    1fd2:	24 ee       	ldi	r18, 0xE4	; 228
    1fd4:	30 e1       	ldi	r19, 0x10	; 16
    1fd6:	64 e1       	ldi	r22, 0x14	; 20
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a9 01       	movw	r20, r18
    1fe0:	0e 94 55 12 	call	0x24aa	; 0x24aa <TIMER0_voidSetIntervalPeriodic>
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <OS_voidSuspendScheduler>:

void OS_voidSuspendScheduler(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStop();
    1ff2:	0e 94 89 12 	call	0x2512	; 0x2512 <TIMER0_voidStop>
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <OS_u8CreatTask>:


u8    OS_u8CreatTask(u8 Copy_u8Priority,u16 Copy_u16Periodicty, u8 Copy_u8InitialDelay,void (*Copy_pf)(void))
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	27 97       	sbiw	r28, 0x07	; 7
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	8a 83       	std	Y+2, r24	; 0x02
    2012:	7c 83       	std	Y+4, r23	; 0x04
    2014:	6b 83       	std	Y+3, r22	; 0x03
    2016:	4d 83       	std	Y+5, r20	; 0x05
    2018:	3f 83       	std	Y+7, r19	; 0x07
    201a:	2e 83       	std	Y+6, r18	; 0x06
	u8 Local_ErrorState = STD_TYPES_NOK;
    201c:	19 82       	std	Y+1, r1	; 0x01
	//
	if((Copy_u8Priority < OS_u8_MAX_NUMBER_TASKS) && (Copy_pf != NULL) && (Copy_u16Periodicty != 0))
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	85 30       	cpi	r24, 0x05	; 5
    2022:	08 f0       	brcs	.+2      	; 0x2026 <OS_u8CreatTask+0x2a>
    2024:	76 c0       	rjmp	.+236    	; 0x2112 <OS_u8CreatTask+0x116>
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f4       	brne	.+2      	; 0x2030 <OS_u8CreatTask+0x34>
    202e:	71 c0       	rjmp	.+226    	; 0x2112 <OS_u8CreatTask+0x116>
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	09 f4       	brne	.+2      	; 0x203a <OS_u8CreatTask+0x3e>
    2038:	6c c0       	rjmp	.+216    	; 0x2112 <OS_u8CreatTask+0x116>
	{
		OS_arrTasks[Copy_u8Priority].Periodicty = Copy_u16Periodicty;
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	c9 01       	movw	r24, r18
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	82 1b       	sub	r24, r18
    2050:	93 0b       	sbc	r25, r19
    2052:	fc 01       	movw	r30, r24
    2054:	e9 57       	subi	r30, 0x79	; 121
    2056:	fe 4f       	sbci	r31, 0xFE	; 254
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
		OS_arrTasks[Copy_u8Priority].pf         = Copy_pf;
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	c9 01       	movw	r24, r18
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	82 1b       	sub	r24, r18
    2076:	93 0b       	sbc	r25, r19
    2078:	fc 01       	movw	r30, r24
    207a:	eb 57       	subi	r30, 0x7B	; 123
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	8e 81       	ldd	r24, Y+6	; 0x06
    2080:	9f 81       	ldd	r25, Y+7	; 0x07
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
		OS_arrTasks[Copy_u8Priority].first_delay = Copy_u8InitialDelay;
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	c9 01       	movw	r24, r18
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	82 1b       	sub	r24, r18
    209c:	93 0b       	sbc	r25, r19
    209e:	fc 01       	movw	r30, r24
    20a0:	e6 57       	subi	r30, 0x76	; 118
    20a2:	fe 4f       	sbci	r31, 0xFE	; 254
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	80 83       	st	Z, r24
		OS_arrTasks[Copy_u8Priority].ticksToWait = OS_arrTasks[Copy_u8Priority].first_delay + OS_arrTasks[Copy_u8Priority].Periodicty;
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	48 2f       	mov	r20, r24
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	c9 01       	movw	r24, r18
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	82 1b       	sub	r24, r18
    20c4:	93 0b       	sbc	r25, r19
    20c6:	fc 01       	movw	r30, r24
    20c8:	e6 57       	subi	r30, 0x76	; 118
    20ca:	fe 4f       	sbci	r31, 0xFE	; 254
    20cc:	60 81       	ld	r22, Z
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	c9 01       	movw	r24, r18
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	82 1b       	sub	r24, r18
    20e4:	93 0b       	sbc	r25, r19
    20e6:	fc 01       	movw	r30, r24
    20e8:	e9 57       	subi	r30, 0x79	; 121
    20ea:	fe 4f       	sbci	r31, 0xFE	; 254
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	26 2f       	mov	r18, r22
    20f2:	28 0f       	add	r18, r24
    20f4:	ca 01       	movw	r24, r20
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	84 1b       	sub	r24, r20
    2104:	95 0b       	sbc	r25, r21
    2106:	fc 01       	movw	r30, r24
    2108:	e5 57       	subi	r30, 0x75	; 117
    210a:	fe 4f       	sbci	r31, 0xFE	; 254
    210c:	20 83       	st	Z, r18
		Local_ErrorState = STD_TYPES_OK;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
}
    2114:	27 96       	adiw	r28, 0x07	; 7
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <OS_u8SuspendTask>:

void   OS_u8SuspendTask(u8 Copy_u8TaskId)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	89 83       	std	Y+1, r24	; 0x01
	OS_arrTasks[Copy_u8TaskId].State = TASK_SUSPENDED;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	c9 01       	movw	r24, r18
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	82 1b       	sub	r24, r18
    2148:	93 0b       	sbc	r25, r19
    214a:	fc 01       	movw	r30, r24
    214c:	e7 57       	subi	r30, 0x77	; 119
    214e:	fe 4f       	sbci	r31, 0xFE	; 254
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	80 83       	st	Z, r24
}
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <OS_u8ResumeTask>:

void   OS_u8ResumeTask(u8 Copy_u8TaskId)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
	OS_arrTasks[Copy_u8TaskId].State = TASK_WAITING;
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	c9 01       	movw	r24, r18
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	82 1b       	sub	r24, r18
    217e:	93 0b       	sbc	r25, r19
    2180:	fc 01       	movw	r30, r24
    2182:	e7 57       	subi	r30, 0x77	; 119
    2184:	fe 4f       	sbci	r31, 0xFE	; 254
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	80 83       	st	Z, r24
}
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <OS_u8DeleteTask>:


void   OS_u8DeleteTask(u8 Copy_u8TaskId)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	0f 92       	push	r0
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	89 83       	std	Y+1, r24	; 0x01
	OS_arrTasks[Copy_u8TaskId].pf = NULL;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	c9 01       	movw	r24, r18
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	82 1b       	sub	r24, r18
    21b4:	93 0b       	sbc	r25, r19
    21b6:	fc 01       	movw	r30, r24
    21b8:	eb 57       	subi	r30, 0x7B	; 123
    21ba:	fe 4f       	sbci	r31, 0xFE	; 254
    21bc:	11 82       	std	Z+1, r1	; 0x01
    21be:	10 82       	st	Z, r1
}
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <OS_voidScheduler>:


static void  OS_voidScheduler(void)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Counter;
	for(Local_u8Counter = 0;Local_u8Counter < OS_u8_MAX_NUMBER_TASKS ;Local_u8Counter++)
    21d2:	19 82       	std	Y+1, r1	; 0x01
    21d4:	7c c0       	rjmp	.+248    	; 0x22ce <OS_voidScheduler+0x106>
	{
		OS_arrTasks[Local_u8Counter].ticksToWait--;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	c9 01       	movw	r24, r18
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	82 1b       	sub	r24, r18
    21ec:	93 0b       	sbc	r25, r19
    21ee:	fc 01       	movw	r30, r24
    21f0:	e5 57       	subi	r30, 0x75	; 117
    21f2:	fe 4f       	sbci	r31, 0xFE	; 254
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2f       	mov	r20, r24
    21f8:	41 50       	subi	r20, 0x01	; 1
    21fa:	c9 01       	movw	r24, r18
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	82 1b       	sub	r24, r18
    220a:	93 0b       	sbc	r25, r19
    220c:	fc 01       	movw	r30, r24
    220e:	e5 57       	subi	r30, 0x75	; 117
    2210:	fe 4f       	sbci	r31, 0xFE	; 254
    2212:	40 83       	st	Z, r20

		if(OS_arrTasks[Local_u8Counter].ticksToWait == 0 && OS_arrTasks[Local_u8Counter].State != TASK_SUSPENDED)
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	c9 01       	movw	r24, r18
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	82 1b       	sub	r24, r18
    222a:	93 0b       	sbc	r25, r19
    222c:	fc 01       	movw	r30, r24
    222e:	e5 57       	subi	r30, 0x75	; 117
    2230:	fe 4f       	sbci	r31, 0xFE	; 254
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	09 f0       	breq	.+2      	; 0x223a <OS_voidScheduler+0x72>
    2238:	47 c0       	rjmp	.+142    	; 0x22c8 <OS_voidScheduler+0x100>
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	c9 01       	movw	r24, r18
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	82 1b       	sub	r24, r18
    2250:	93 0b       	sbc	r25, r19
    2252:	fc 01       	movw	r30, r24
    2254:	e7 57       	subi	r30, 0x77	; 119
    2256:	fe 4f       	sbci	r31, 0xFE	; 254
    2258:	80 81       	ld	r24, Z
    225a:	83 30       	cpi	r24, 0x03	; 3
    225c:	a9 f1       	breq	.+106    	; 0x22c8 <OS_voidScheduler+0x100>
		{
			OS_arrTasks[Local_u8Counter].ticksToWait = OS_arrTasks[Local_u8Counter].Periodicty;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	48 2f       	mov	r20, r24
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	c9 01       	movw	r24, r18
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	82 1b       	sub	r24, r18
    227a:	93 0b       	sbc	r25, r19
    227c:	fc 01       	movw	r30, r24
    227e:	e9 57       	subi	r30, 0x79	; 121
    2280:	fe 4f       	sbci	r31, 0xFE	; 254
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	28 2f       	mov	r18, r24
    2288:	ca 01       	movw	r24, r20
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	84 1b       	sub	r24, r20
    2298:	95 0b       	sbc	r25, r21
    229a:	fc 01       	movw	r30, r24
    229c:	e5 57       	subi	r30, 0x75	; 117
    229e:	fe 4f       	sbci	r31, 0xFE	; 254
    22a0:	20 83       	st	Z, r18
			OS_arrTasks[Local_u8Counter].pf();
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	c9 01       	movw	r24, r18
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	82 1b       	sub	r24, r18
    22b8:	93 0b       	sbc	r25, r19
    22ba:	fc 01       	movw	r30, r24
    22bc:	eb 57       	subi	r30, 0x7B	; 123
    22be:	fe 4f       	sbci	r31, 0xFE	; 254
    22c0:	01 90       	ld	r0, Z+
    22c2:	f0 81       	ld	r31, Z
    22c4:	e0 2d       	mov	r30, r0
    22c6:	09 95       	icall


static void  OS_voidScheduler(void)
{
	u8 Local_u8Counter;
	for(Local_u8Counter = 0;Local_u8Counter < OS_u8_MAX_NUMBER_TASKS ;Local_u8Counter++)
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	8f 5f       	subi	r24, 0xFF	; 255
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	85 30       	cpi	r24, 0x05	; 5
    22d2:	08 f4       	brcc	.+2      	; 0x22d6 <OS_voidScheduler+0x10e>
    22d4:	80 cf       	rjmp	.-256    	; 0x21d6 <OS_voidScheduler+0xe>
		{
			OS_arrTasks[Local_u8Counter].ticksToWait = OS_arrTasks[Local_u8Counter].Periodicty;
			OS_arrTasks[Local_u8Counter].pf();
		}else{}
	}
}
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <TIMER0_voidInit>:
static u8 TCNT0_PERIODIC = 0;

static void (*callBack_ptr)(void) = NULL;

void TIMER0_voidInit(u8 Copy_u8Mode)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <TIMER0_voidInit+0x6>
    22e4:	0f 92       	push	r0
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Mode)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	3b 83       	std	Y+3, r19	; 0x03
    22f4:	2a 83       	std	Y+2, r18	; 0x02
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	91 05       	cpc	r25, r1
    22fe:	f1 f0       	breq	.+60     	; 0x233c <TIMER0_voidInit+0x5e>
    2300:	2a 81       	ldd	r18, Y+2	; 0x02
    2302:	3b 81       	ldd	r19, Y+3	; 0x03
    2304:	22 30       	cpi	r18, 0x02	; 2
    2306:	31 05       	cpc	r19, r1
    2308:	2c f4       	brge	.+10     	; 0x2314 <TIMER0_voidInit+0x36>
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	9b 81       	ldd	r25, Y+3	; 0x03
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	61 f0       	breq	.+24     	; 0x232a <TIMER0_voidInit+0x4c>
    2312:	1d c0       	rjmp	.+58     	; 0x234e <TIMER0_voidInit+0x70>
    2314:	2a 81       	ldd	r18, Y+2	; 0x02
    2316:	3b 81       	ldd	r19, Y+3	; 0x03
    2318:	22 30       	cpi	r18, 0x02	; 2
    231a:	31 05       	cpc	r19, r1
    231c:	51 f0       	breq	.+20     	; 0x2332 <TIMER0_voidInit+0x54>
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	9b 81       	ldd	r25, Y+3	; 0x03
    2322:	83 30       	cpi	r24, 0x03	; 3
    2324:	91 05       	cpc	r25, r1
    2326:	79 f0       	breq	.+30     	; 0x2346 <TIMER0_voidInit+0x68>
    2328:	12 c0       	rjmp	.+36     	; 0x234e <TIMER0_voidInit+0x70>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0 = 0;
    232a:	e3 e5       	ldi	r30, 0x53	; 83
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	10 82       	st	Z, r1
    2330:	0e c0       	rjmp	.+28     	; 0x234e <TIMER0_voidInit+0x70>
		break;

	case TIMER0_CTC_MODE:
		TCCR0 = (1 << WGM01);
    2332:	e3 e5       	ldi	r30, 0x53	; 83
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	88 e0       	ldi	r24, 0x08	; 8
    2338:	80 83       	st	Z, r24
    233a:	09 c0       	rjmp	.+18     	; 0x234e <TIMER0_voidInit+0x70>

		break;
	case TIMER0_PHASE_CORRECT_PWM:
		TCCR0 = (1 << WGM00) | (1 << COM01);
    233c:	e3 e5       	ldi	r30, 0x53	; 83
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 e6       	ldi	r24, 0x60	; 96
    2342:	80 83       	st	Z, r24
    2344:	04 c0       	rjmp	.+8      	; 0x234e <TIMER0_voidInit+0x70>

		break;
	case TIMER0_FAST_PWM:
		TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01);
    2346:	e3 e5       	ldi	r30, 0x53	; 83
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	88 e6       	ldi	r24, 0x68	; 104
    234c:	80 83       	st	Z, r24

		break;
	}
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <TIMER0_voidSetBusyWait>:
void TIMER0_voidSetBusyWait(u32 Copy_u32Ticks)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	29 97       	sbiw	r28, 0x09	; 9
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	6e 83       	std	Y+6, r22	; 0x06
    2370:	7f 83       	std	Y+7, r23	; 0x07
    2372:	88 87       	std	Y+8, r24	; 0x08
    2374:	99 87       	std	Y+9, r25	; 0x09
	TCCR0 = (TCCR0 & 0xF8) | TIMER0_PRESCALER;
    2376:	a3 e5       	ldi	r26, 0x53	; 83
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e3 e5       	ldi	r30, 0x53	; 83
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 7f       	andi	r24, 0xF8	; 248
    2382:	85 60       	ori	r24, 0x05	; 5
    2384:	8c 93       	st	X, r24
	u32 Local_ovfCounter = 0;
    2386:	1a 82       	std	Y+2, r1	; 0x02
    2388:	1b 82       	std	Y+3, r1	; 0x03
    238a:	1c 82       	std	Y+4, r1	; 0x04
    238c:	1d 82       	std	Y+5, r1	; 0x05
	no_ovfs = Copy_u32Ticks / TIMER0_MAX_NO_TICKS;
    238e:	8e 81       	ldd	r24, Y+6	; 0x06
    2390:	9f 81       	ldd	r25, Y+7	; 0x07
    2392:	a8 85       	ldd	r26, Y+8	; 0x08
    2394:	b9 85       	ldd	r27, Y+9	; 0x09
    2396:	89 2f       	mov	r24, r25
    2398:	9a 2f       	mov	r25, r26
    239a:	ab 2f       	mov	r26, r27
    239c:	bb 27       	eor	r27, r27
    239e:	80 93 7d 01 	sts	0x017D, r24
    23a2:	90 93 7e 01 	sts	0x017E, r25
    23a6:	a0 93 7f 01 	sts	0x017F, r26
    23aa:	b0 93 80 01 	sts	0x0180, r27
	u8 Local_remainingCounts = Copy_u32Ticks - (Local_ovfCounter * TIMER0_MAX_NO_TICKS);
    23ae:	2e 81       	ldd	r18, Y+6	; 0x06
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	9b 81       	ldd	r25, Y+3	; 0x03
    23b4:	ac 81       	ldd	r26, Y+4	; 0x04
    23b6:	bd 81       	ldd	r27, Y+5	; 0x05
    23b8:	ba 2f       	mov	r27, r26
    23ba:	a9 2f       	mov	r26, r25
    23bc:	98 2f       	mov	r25, r24
    23be:	88 27       	eor	r24, r24
    23c0:	92 2f       	mov	r25, r18
    23c2:	98 1b       	sub	r25, r24
    23c4:	89 2f       	mov	r24, r25
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	17 c0       	rjmp	.+46     	; 0x23f8 <TIMER0_voidSetBusyWait+0x9e>

	while(Local_ovfCounter != no_ovfs)
	{
		while(BIT_IS_CLEAR(TIFR, TOV0));
    23ca:	e8 e5       	ldi	r30, 0x58	; 88
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	88 23       	and	r24, r24
    23d2:	d9 f3       	breq	.-10     	; 0x23ca <TIMER0_voidSetBusyWait+0x70>
		Local_ovfCounter++;
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	9b 81       	ldd	r25, Y+3	; 0x03
    23d8:	ac 81       	ldd	r26, Y+4	; 0x04
    23da:	bd 81       	ldd	r27, Y+5	; 0x05
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	a1 1d       	adc	r26, r1
    23e0:	b1 1d       	adc	r27, r1
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	9b 83       	std	Y+3, r25	; 0x03
    23e6:	ac 83       	std	Y+4, r26	; 0x04
    23e8:	bd 83       	std	Y+5, r27	; 0x05
		SET_BIT(TIFR, TOV0);
    23ea:	a8 e5       	ldi	r26, 0x58	; 88
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e8 e5       	ldi	r30, 0x58	; 88
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	81 60       	ori	r24, 0x01	; 1
    23f6:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF8) | TIMER0_PRESCALER;
	u32 Local_ovfCounter = 0;
	no_ovfs = Copy_u32Ticks / TIMER0_MAX_NO_TICKS;
	u8 Local_remainingCounts = Copy_u32Ticks - (Local_ovfCounter * TIMER0_MAX_NO_TICKS);

	while(Local_ovfCounter != no_ovfs)
    23f8:	20 91 7d 01 	lds	r18, 0x017D
    23fc:	30 91 7e 01 	lds	r19, 0x017E
    2400:	40 91 7f 01 	lds	r20, 0x017F
    2404:	50 91 80 01 	lds	r21, 0x0180
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	ac 81       	ldd	r26, Y+4	; 0x04
    240e:	bd 81       	ldd	r27, Y+5	; 0x05
    2410:	82 17       	cp	r24, r18
    2412:	93 07       	cpc	r25, r19
    2414:	a4 07       	cpc	r26, r20
    2416:	b5 07       	cpc	r27, r21
    2418:	c1 f6       	brne	.-80     	; 0x23ca <TIMER0_voidSetBusyWait+0x70>
		while(BIT_IS_CLEAR(TIFR, TOV0));
		Local_ovfCounter++;
		SET_BIT(TIFR, TOV0);
	}

	TCNT0 = (TIMER0_MAX_NO_TICKS) - Local_remainingCounts;
    241a:	e2 e5       	ldi	r30, 0x52	; 82
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	81 95       	neg	r24
    2422:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TIFR, TOV0));
    2424:	e8 e5       	ldi	r30, 0x58	; 88
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	d9 f3       	breq	.-10     	; 0x2424 <TIMER0_voidSetBusyWait+0xca>
	SET_BIT(TIFR, TOV0);
    242e:	a8 e5       	ldi	r26, 0x58	; 88
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e8 e5       	ldi	r30, 0x58	; 88
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	81 60       	ori	r24, 0x01	; 1
    243a:	8c 93       	st	X, r24
}
    243c:	29 96       	adiw	r28, 0x09	; 9
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <TIMER0_voidSetIntervalSingle>:

void TIMER0_voidSetIntervalSingle(u32 Copy_u32Ticks, void (*Copy_funcPtr) (void))
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <TIMER0_voidSetIntervalSingle+0x6>
    2454:	00 d0       	rcall	.+0      	; 0x2456 <TIMER0_voidSetIntervalSingle+0x8>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <TIMER0_voidSetIntervalSingle+0xa>
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	69 83       	std	Y+1, r22	; 0x01
    245e:	7a 83       	std	Y+2, r23	; 0x02
    2460:	8b 83       	std	Y+3, r24	; 0x03
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	5e 83       	std	Y+6, r21	; 0x06
    2466:	4d 83       	std	Y+5, r20	; 0x05
	TCCR0 = (TCCR0 & 0xF8) | TIMER0_PRESCALER;
    2468:	a3 e5       	ldi	r26, 0x53	; 83
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e3 e5       	ldi	r30, 0x53	; 83
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	88 7f       	andi	r24, 0xF8	; 248
    2474:	85 60       	ori	r24, 0x05	; 5
    2476:	8c 93       	st	X, r24

	SET_BIT(TIMSK, TOIE0);
    2478:	a9 e5       	ldi	r26, 0x59	; 89
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e9 e5       	ldi	r30, 0x59	; 89
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	81 60       	ori	r24, 0x01	; 1
    2484:	8c 93       	st	X, r24
	callBack_ptr = Copy_funcPtr;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	90 93 84 01 	sts	0x0184, r25
    248e:	80 93 83 01 	sts	0x0183, r24
	isSingleInterval = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	80 93 81 01 	sts	0x0181, r24

}
    2498:	26 96       	adiw	r28, 0x06	; 6
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TIMER0_voidSetIntervalPeriodic>:
void TIMER0_voidSetIntervalPeriodic(u32 Copy_u32Ticks, void (*Copy_funcPtr) (void))
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <TIMER0_voidSetIntervalPeriodic+0x6>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <TIMER0_voidSetIntervalPeriodic+0x8>
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <TIMER0_voidSetIntervalPeriodic+0xa>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	69 83       	std	Y+1, r22	; 0x01
    24ba:	7a 83       	std	Y+2, r23	; 0x02
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	9c 83       	std	Y+4, r25	; 0x04
    24c0:	5e 83       	std	Y+6, r21	; 0x06
    24c2:	4d 83       	std	Y+5, r20	; 0x05
	TCCR0 = (TCCR0 & 0xF8) | TIMER0_PRESCALER;
    24c4:	a3 e5       	ldi	r26, 0x53	; 83
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e3 e5       	ldi	r30, 0x53	; 83
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 7f       	andi	r24, 0xF8	; 248
    24d0:	85 60       	ori	r24, 0x05	; 5
    24d2:	8c 93       	st	X, r24
	TCNT0_PERIODIC = 256 - Copy_u32Ticks;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	81 95       	neg	r24
    24d8:	80 93 82 01 	sts	0x0182, r24
	TCNT0 = TCNT0_PERIODIC;
    24dc:	e2 e5       	ldi	r30, 0x52	; 82
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 91 82 01 	lds	r24, 0x0182
    24e4:	80 83       	st	Z, r24
	SET_BIT(TIMSK, TOIE0);
    24e6:	a9 e5       	ldi	r26, 0x59	; 89
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e9 e5       	ldi	r30, 0x59	; 89
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	81 60       	ori	r24, 0x01	; 1
    24f2:	8c 93       	st	X, r24
	callBack_ptr = Copy_funcPtr;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	90 93 84 01 	sts	0x0184, r25
    24fc:	80 93 83 01 	sts	0x0183, r24
}
    2500:	26 96       	adiw	r28, 0x06	; 6
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <TIMER0_voidStop>:

void TIMER0_voidStop(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = TCCR0 & 0xF8;
    251a:	a3 e5       	ldi	r26, 0x53	; 83
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e3 e5       	ldi	r30, 0x53	; 83
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	88 7f       	andi	r24, 0xF8	; 248
    2526:	8c 93       	st	X, r24
}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    252e:	1f 92       	push	r1
    2530:	0f 92       	push	r0
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	0f 92       	push	r0
    2536:	11 24       	eor	r1, r1
    2538:	2f 93       	push	r18
    253a:	3f 93       	push	r19
    253c:	4f 93       	push	r20
    253e:	5f 93       	push	r21
    2540:	6f 93       	push	r22
    2542:	7f 93       	push	r23
    2544:	8f 93       	push	r24
    2546:	9f 93       	push	r25
    2548:	af 93       	push	r26
    254a:	bf 93       	push	r27
    254c:	ef 93       	push	r30
    254e:	ff 93       	push	r31
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr)
    2558:	80 91 83 01 	lds	r24, 0x0183
    255c:	90 91 84 01 	lds	r25, 0x0184
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	99 f0       	breq	.+38     	; 0x258a <__vector_11+0x5c>
	{
		callBack_ptr();
    2564:	e0 91 83 01 	lds	r30, 0x0183
    2568:	f0 91 84 01 	lds	r31, 0x0184
    256c:	09 95       	icall
		if(isSingleInterval)
    256e:	80 91 81 01 	lds	r24, 0x0181
    2572:	88 23       	and	r24, r24
    2574:	29 f0       	breq	.+10     	; 0x2580 <__vector_11+0x52>
		{
			TIMER0_voidStop();
    2576:	0e 94 89 12 	call	0x2512	; 0x2512 <TIMER0_voidStop>
			isSingleInterval = 0;
    257a:	10 92 81 01 	sts	0x0181, r1
    257e:	05 c0       	rjmp	.+10     	; 0x258a <__vector_11+0x5c>
		}else
		{
			TCNT0 = TCNT0_PERIODIC;
    2580:	e2 e5       	ldi	r30, 0x52	; 82
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 91 82 01 	lds	r24, 0x0182
    2588:	80 83       	st	Z, r24
		}
	}
}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	ff 91       	pop	r31
    2590:	ef 91       	pop	r30
    2592:	bf 91       	pop	r27
    2594:	af 91       	pop	r26
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	7f 91       	pop	r23
    259c:	6f 91       	pop	r22
    259e:	5f 91       	pop	r21
    25a0:	4f 91       	pop	r20
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <main>:
void LED_task(void);
void DC_MOTOR_task(void);
void LM35_task(void);

int main(void)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <main+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    25ba:	0e 94 8c 0c 	call	0x1918	; 0x1918 <LCD_init>
	LCD_displayString("MOHAMED IBRAHIM");
    25be:	80 e6       	ldi	r24, 0x60	; 96
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <LCD_displayString>
	GPIO_voidSetPinDirection(GPIO_PORTA, PIN7, PIN_OUTPUT);
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	67 e0       	ldi	r22, 0x07	; 7
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>

	ADC_ConfigType adc_ch2 = {.ref_volt = ADC_Internal, .prescaler = ADC_PRESCALER_8};
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&adc_ch2);
    25d8:	ce 01       	movw	r24, r28
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ADC_init>
	GPIO_voidSetPinDirection(GPIO_PORTD, PIN4, PIN_OUTPUT);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	64 e0       	ldi	r22, 0x04	; 4
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>

	DcMotor_Init();
    25ea:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <DcMotor_Init>
	DcMotor_Rotate(CW);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <DcMotor_Rotate>

	GPIO_voidSetPinDirection(GPIO_PORTC, PIN0, PIN_OUTPUT);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>

	GPIO_voidSetPinDirection(GPIO_PORTC, PIN4, PIN_OUTPUT);
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	64 e0       	ldi	r22, 0x04	; 4
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIO_PORTC, PIN5, PIN_OUTPUT);
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	65 e0       	ldi	r22, 0x05	; 5
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIO_PORTC, PIN6, PIN_OUTPUT);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	66 e0       	ldi	r22, 0x06	; 6
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIO_PORTC, PIN7, PIN_OUTPUT);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	67 e0       	ldi	r22, 0x07	; 7
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_voidSetPinDirection>

	OS_voidInit();
    2626:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <OS_voidInit>

	OS_u8CreatTask(0, 50, 0, BUZZER_task);
    262a:	27 e4       	ldi	r18, 0x47	; 71
    262c:	33 e1       	ldi	r19, 0x13	; 19
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	62 e3       	ldi	r22, 0x32	; 50
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OS_u8CreatTask>
	OS_u8CreatTask(1, 13, 0, LCD_task);
    263a:	22 e5       	ldi	r18, 0x52	; 82
    263c:	33 e1       	ldi	r19, 0x13	; 19
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	6d e0       	ldi	r22, 0x0D	; 13
    2642:	70 e0       	ldi	r23, 0x00	; 0
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OS_u8CreatTask>
	OS_u8CreatTask(2, 30, 0, LED_task);
    264a:	2c e5       	ldi	r18, 0x5C	; 92
    264c:	33 e1       	ldi	r19, 0x13	; 19
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	6e e1       	ldi	r22, 0x1E	; 30
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OS_u8CreatTask>
	OS_u8CreatTask(3, 40, 0, DC_MOTOR_task);
    265a:	23 e7       	ldi	r18, 0x73	; 115
    265c:	33 e1       	ldi	r19, 0x13	; 19
    265e:	83 e0       	ldi	r24, 0x03	; 3
    2660:	68 e2       	ldi	r22, 0x28	; 40
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OS_u8CreatTask>
	OS_u8CreatTask(4, 100, 25, LM35_task);
    266a:	2c e7       	ldi	r18, 0x7C	; 124
    266c:	33 e1       	ldi	r19, 0x13	; 19
    266e:	84 e0       	ldi	r24, 0x04	; 4
    2670:	64 e6       	ldi	r22, 0x64	; 100
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	49 e1       	ldi	r20, 0x19	; 25
    2676:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OS_u8CreatTask>



	SET_BIT(SREG, 7);
    267a:	af e5       	ldi	r26, 0x5F	; 95
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	ef e5       	ldi	r30, 0x5F	; 95
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	80 68       	ori	r24, 0x80	; 128
    2686:	8c 93       	st	X, r24
	OS_voidStartScheduler();
    2688:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <OS_voidStartScheduler>
    268c:	ff cf       	rjmp	.-2      	; 0x268c <main+0xdc>

0000268e <BUZZER_task>:
	}

}

void BUZZER_task(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	GPIO_voidTogglePin(GPIO_PORTC, PIN0);
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <LCD_task>:

void LCD_task(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0X1C);
    26ac:	8c e1       	ldi	r24, 0x1C	; 28
    26ae:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_sendCommand>
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <LED_task>:


void LED_task(void)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
	GPIO_voidTogglePin(GPIO_PORTC, PIN4);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	64 e0       	ldi	r22, 0x04	; 4
    26c4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>
	GPIO_voidTogglePin(GPIO_PORTC, PIN5);
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	65 e0       	ldi	r22, 0x05	; 5
    26cc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>
	GPIO_voidTogglePin(GPIO_PORTC, PIN6);
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	66 e0       	ldi	r22, 0x06	; 6
    26d4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>
	GPIO_voidTogglePin(GPIO_PORTC, PIN7);
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	67 e0       	ldi	r22, 0x07	; 7
    26dc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>

}
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <DC_MOTOR_task>:

void DC_MOTOR_task(void)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	DcMotor_voidChangeDir();
    26ee:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <DcMotor_voidChangeDir>
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <LM35_task>:

void LM35_task(void)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	0f 92       	push	r0
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	GPIO_voidTogglePin(GPIO_PORTA, PIN7);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	67 e0       	ldi	r22, 0x07	; 7
    2706:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>
	//GPIO_voidSetPinValue(GPIO_PORTA, PIN7, LOGIC_HIGH);
	 u8 temp;
	/* get lm35 reading */
	temp = LM35_getTemperature();
    270a:	0e 94 47 0c 	call	0x188e	; 0x188e <LM35_getTemperature>
    270e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_voidTogglePin(GPIO_PORTD, PIN4);
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	64 e0       	ldi	r22, 0x04	; 4
    2714:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_voidTogglePin>
	//GPIO_voidSetPinValue(GPIO_PORTA, PIN7, LOGIC_LOW);


}
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <__mulsi3>:
    2720:	62 9f       	mul	r22, r18
    2722:	d0 01       	movw	r26, r0
    2724:	73 9f       	mul	r23, r19
    2726:	f0 01       	movw	r30, r0
    2728:	82 9f       	mul	r24, r18
    272a:	e0 0d       	add	r30, r0
    272c:	f1 1d       	adc	r31, r1
    272e:	64 9f       	mul	r22, r20
    2730:	e0 0d       	add	r30, r0
    2732:	f1 1d       	adc	r31, r1
    2734:	92 9f       	mul	r25, r18
    2736:	f0 0d       	add	r31, r0
    2738:	83 9f       	mul	r24, r19
    273a:	f0 0d       	add	r31, r0
    273c:	74 9f       	mul	r23, r20
    273e:	f0 0d       	add	r31, r0
    2740:	65 9f       	mul	r22, r21
    2742:	f0 0d       	add	r31, r0
    2744:	99 27       	eor	r25, r25
    2746:	72 9f       	mul	r23, r18
    2748:	b0 0d       	add	r27, r0
    274a:	e1 1d       	adc	r30, r1
    274c:	f9 1f       	adc	r31, r25
    274e:	63 9f       	mul	r22, r19
    2750:	b0 0d       	add	r27, r0
    2752:	e1 1d       	adc	r30, r1
    2754:	f9 1f       	adc	r31, r25
    2756:	bd 01       	movw	r22, r26
    2758:	cf 01       	movw	r24, r30
    275a:	11 24       	eor	r1, r1
    275c:	08 95       	ret

0000275e <__prologue_saves__>:
    275e:	2f 92       	push	r2
    2760:	3f 92       	push	r3
    2762:	4f 92       	push	r4
    2764:	5f 92       	push	r5
    2766:	6f 92       	push	r6
    2768:	7f 92       	push	r7
    276a:	8f 92       	push	r8
    276c:	9f 92       	push	r9
    276e:	af 92       	push	r10
    2770:	bf 92       	push	r11
    2772:	cf 92       	push	r12
    2774:	df 92       	push	r13
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	ca 1b       	sub	r28, r26
    2788:	db 0b       	sbc	r29, r27
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	09 94       	ijmp

00002796 <__epilogue_restores__>:
    2796:	2a 88       	ldd	r2, Y+18	; 0x12
    2798:	39 88       	ldd	r3, Y+17	; 0x11
    279a:	48 88       	ldd	r4, Y+16	; 0x10
    279c:	5f 84       	ldd	r5, Y+15	; 0x0f
    279e:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a8:	b9 84       	ldd	r11, Y+9	; 0x09
    27aa:	c8 84       	ldd	r12, Y+8	; 0x08
    27ac:	df 80       	ldd	r13, Y+7	; 0x07
    27ae:	ee 80       	ldd	r14, Y+6	; 0x06
    27b0:	fd 80       	ldd	r15, Y+5	; 0x05
    27b2:	0c 81       	ldd	r16, Y+4	; 0x04
    27b4:	1b 81       	ldd	r17, Y+3	; 0x03
    27b6:	aa 81       	ldd	r26, Y+2	; 0x02
    27b8:	b9 81       	ldd	r27, Y+1	; 0x01
    27ba:	ce 0f       	add	r28, r30
    27bc:	d1 1d       	adc	r29, r1
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	ed 01       	movw	r28, r26
    27ca:	08 95       	ret

000027cc <itoa>:
    27cc:	fb 01       	movw	r30, r22
    27ce:	9f 01       	movw	r18, r30
    27d0:	e8 94       	clt
    27d2:	42 30       	cpi	r20, 0x02	; 2
    27d4:	c4 f0       	brlt	.+48     	; 0x2806 <itoa+0x3a>
    27d6:	45 32       	cpi	r20, 0x25	; 37
    27d8:	b4 f4       	brge	.+44     	; 0x2806 <itoa+0x3a>
    27da:	4a 30       	cpi	r20, 0x0A	; 10
    27dc:	29 f4       	brne	.+10     	; 0x27e8 <itoa+0x1c>
    27de:	97 fb       	bst	r25, 7
    27e0:	1e f4       	brtc	.+6      	; 0x27e8 <itoa+0x1c>
    27e2:	90 95       	com	r25
    27e4:	81 95       	neg	r24
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	64 2f       	mov	r22, r20
    27ea:	77 27       	eor	r23, r23
    27ec:	0e 94 17 14 	call	0x282e	; 0x282e <__udivmodhi4>
    27f0:	80 5d       	subi	r24, 0xD0	; 208
    27f2:	8a 33       	cpi	r24, 0x3A	; 58
    27f4:	0c f0       	brlt	.+2      	; 0x27f8 <itoa+0x2c>
    27f6:	89 5d       	subi	r24, 0xD9	; 217
    27f8:	81 93       	st	Z+, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 f7       	brne	.-24     	; 0x27e8 <itoa+0x1c>
    2800:	16 f4       	brtc	.+4      	; 0x2806 <itoa+0x3a>
    2802:	5d e2       	ldi	r21, 0x2D	; 45
    2804:	51 93       	st	Z+, r21
    2806:	10 82       	st	Z, r1
    2808:	c9 01       	movw	r24, r18
    280a:	0c 94 07 14 	jmp	0x280e	; 0x280e <strrev>

0000280e <strrev>:
    280e:	dc 01       	movw	r26, r24
    2810:	fc 01       	movw	r30, r24
    2812:	67 2f       	mov	r22, r23
    2814:	71 91       	ld	r23, Z+
    2816:	77 23       	and	r23, r23
    2818:	e1 f7       	brne	.-8      	; 0x2812 <strrev+0x4>
    281a:	32 97       	sbiw	r30, 0x02	; 2
    281c:	04 c0       	rjmp	.+8      	; 0x2826 <strrev+0x18>
    281e:	7c 91       	ld	r23, X
    2820:	6d 93       	st	X+, r22
    2822:	70 83       	st	Z, r23
    2824:	62 91       	ld	r22, -Z
    2826:	ae 17       	cp	r26, r30
    2828:	bf 07       	cpc	r27, r31
    282a:	c8 f3       	brcs	.-14     	; 0x281e <strrev+0x10>
    282c:	08 95       	ret

0000282e <__udivmodhi4>:
    282e:	aa 1b       	sub	r26, r26
    2830:	bb 1b       	sub	r27, r27
    2832:	51 e1       	ldi	r21, 0x11	; 17
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <__udivmodhi4_ep>

00002836 <__udivmodhi4_loop>:
    2836:	aa 1f       	adc	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	a6 17       	cp	r26, r22
    283c:	b7 07       	cpc	r27, r23
    283e:	10 f0       	brcs	.+4      	; 0x2844 <__udivmodhi4_ep>
    2840:	a6 1b       	sub	r26, r22
    2842:	b7 0b       	sbc	r27, r23

00002844 <__udivmodhi4_ep>:
    2844:	88 1f       	adc	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	5a 95       	dec	r21
    284a:	a9 f7       	brne	.-22     	; 0x2836 <__udivmodhi4_loop>
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	08 95       	ret

00002856 <_exit>:
    2856:	f8 94       	cli

00002858 <__stop_program>:
    2858:	ff cf       	rjmp	.-2      	; 0x2858 <__stop_program>
